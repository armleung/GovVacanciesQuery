{"version":3,"sources":["demo.js","App.js","serviceWorker.js","index.js"],"names":["messages","id","primary","secondary","person","withStyles","theme","text","paddingTop","spacing","unit","paddingLeft","paddingRight","paper","paddingBottom","list","marginBottom","subHeader","backgroundColor","palette","background","appBar","top","bottom","toolbar","alignItems","justifyContent","fabButton","position","zIndex","left","right","margin","props","classes","react_default","a","createElement","Fragment","CssBaseline_default","Paper_default","square","className","Typography_default","variant","gutterBottom","List_default","map","_ref","react","key","ListSubheader_default","ListItem_default","button","Avatar_default","alt","src","ListItemText_default","AppBar_default","color","Toolbar_default","IconButton_default","aria-label","Menu_default","Fab_default","Add_default","Search_default","MoreVert_default","App","demo","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1209e29.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\n\r\nconst styles = theme => ({\r\n  text: {\r\n    paddingTop: theme.spacing.unit * 2,\r\n    paddingLeft: theme.spacing.unit * 2,\r\n    paddingRight: theme.spacing.unit * 2,\r\n  },\r\n  paper: {\r\n    paddingBottom: 50,\r\n  },\r\n  list: {\r\n    marginBottom: theme.spacing.unit * 2,\r\n  },\r\n  subHeader: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  appBar: {\r\n    top: 'auto',\r\n    bottom: 0,\r\n  },\r\n  toolbar: {\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n  },\r\n  fabButton: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    top: -30,\r\n    left: 0,\r\n    right: 0,\r\n    margin: '0 auto',\r\n  },\r\n});\r\n\r\nconst messages = [\r\n  {\r\n    id: 1,\r\n    primary: 'Brunch this week?',\r\n    secondary: \"I'll be in the neighbourhood this week. Let's grab a bite to eat\",\r\n    person: './static/images/avatar/5.jpg',\r\n  },\r\n  {\r\n    id: 2,\r\n    primary: 'Birthday Gift',\r\n    secondary: `Do you have a suggestion for a good present for John on his work\r\n      anniversary. I am really confused & would love your thoughts on it.`,\r\n    person: './static/images/avatar/1.jpg',\r\n  },\r\n  {\r\n    id: 3,\r\n    primary: 'Recipe to try',\r\n    secondary: 'I am try out this new BBQ recipe, I think this might be amazing',\r\n    person: './static/images/avatar/2.jpg',\r\n  },\r\n  {\r\n    id: 4,\r\n    primary: 'Yes!',\r\n    secondary: 'I have the tickets to the ReactConf for this year.',\r\n    person: './static/images/avatar/3.jpg',\r\n  },\r\n  {\r\n    id: 5,\r\n    primary: \"Doctor's Appointment\",\r\n    secondary: 'My appointment for the doctor was rescheduled for next Saturday.',\r\n    person: './static/images/avatar/4.jpg',\r\n  },\r\n  {\r\n    id: 6,\r\n    primary: 'Discussion',\r\n    secondary: `Menus that are generated by the bottom app bar (such as a bottom\r\n      navigation drawer or overflow menu) open as bottom sheets at a higher elevation\r\n      than the bar.`,\r\n    person: './static/images/avatar/5.jpg',\r\n  },\r\n  {\r\n    id: 7,\r\n    primary: 'Summer BBQ',\r\n    secondary: `Who wants to have a cookout this weekend? I just got some furniture\r\n      for my backyard and would love to fire up the grill.`,\r\n    person: './static/images/avatar/1.jpg',\r\n  },\r\n];\r\n\r\nfunction BottomAppBar(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Paper square className={classes.paper}>\r\n        <Typography className={classes.text} variant=\"h5\" gutterBottom>\r\n          Inbox\r\n        </Typography>\r\n        <List className={classes.list}>\r\n          {messages.map(({ id, primary, secondary, person }) => (\r\n            <Fragment key={id}>\r\n              {id === 1 && <ListSubheader className={classes.subHeader}>Today</ListSubheader>}\r\n              {id === 3 && <ListSubheader className={classes.subHeader}>Yesterday</ListSubheader>}\r\n              <ListItem button>\r\n                <Avatar alt=\"Profile Picture\" src={person} />\r\n                <ListItemText primary={primary} secondary={secondary} />\r\n              </ListItem>\r\n            </Fragment>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n      <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton color=\"inherit\" aria-label=\"Open drawer\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Fab color=\"secondary\" aria-label=\"Add\" className={classes.fabButton}>\r\n            <AddIcon />\r\n          </Fab>\r\n          <div>\r\n            <IconButton color=\"inherit\">\r\n              <SearchIcon />\r\n            </IconButton>\r\n            <IconButton color=\"inherit\">\r\n              <MoreIcon />\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nBottomAppBar.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(BottomAppBar);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Demo from './demo';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Demo />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}